name: Deploy to GitHub Pages

on:
  push:
    branches: [ github-pages ]
    paths:
      - 'output/audio/**'
      - 'rss.xml'
      - 'index.html'
      - 'episodes/**'
  workflow_dispatch:

  # Run daily to update RSS feed with latest episodes
  schedule:
    - cron: '0 6 * * *' # Daily at 6 AM UTC

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install feedgen mutagen

    - name: Create episodes directory if not exists
      run: |
        mkdir -p episodes
        # Copy any audio files from output/audio to episodes/
        if [ -d "output/audio" ] && [ "$(ls -A output/audio)" ]; then
          cp output/audio/*.mp3 episodes/ 2>/dev/null || true
        fi

    - name: Generate RSS feed from episodes
      run: |
        python3 << 'EOF'
        import os
        import glob
        from datetime import datetime, timezone
        from pathlib import Path
        from feedgen.feed import FeedGenerator
        from mutagen.mp3 import MP3

        BASE_URL = "https://tonytamsf.github.io/HackerCast"
        EPISODES_DIR = Path("episodes")

        # Create feed generator
        fg = FeedGenerator()
        fg.load_extension('podcast')

        # Feed metadata
        fg.title("HackerCast")
        fg.link(href=BASE_URL, rel='alternate')
        fg.description("Daily audio podcasts from the top Hacker News stories")
        fg.author({'name': 'HackerCast', 'email': 'hackercast@example.com'})
        fg.language('en')
        fg.lastBuildDate(datetime.now(timezone.utc))

        # iTunes-specific tags
        fg.podcast.itunes_author("HackerCast")
        fg.podcast.itunes_category('Technology')
        fg.podcast.itunes_summary("Daily audio podcasts from the top Hacker News stories")
        fg.podcast.itunes_owner(name="HackerCast", email="hackercast@example.com")
        fg.podcast.itunes_explicit('no')

        # Find all MP3 files and add them as episodes
        mp3_files = sorted(EPISODES_DIR.glob("*.mp3"), key=lambda x: x.stat().st_mtime, reverse=True)

        for mp3_file in mp3_files:
            try:
                # Get file info
                file_stat = mp3_file.stat()
                file_size = file_stat.st_size
                mod_time = datetime.fromtimestamp(file_stat.st_mtime, tz=timezone.utc)

                # Try to get audio duration
                try:
                    audio = MP3(str(mp3_file))
                    duration = int(audio.info.length) if audio.info.length else None
                except:
                    duration = None

                # Parse date from filename if possible
                try:
                    filename = mp3_file.stem
                    parts = filename.split('_')
                    if len(parts) >= 2 and parts[1].isdigit() and len(parts[1]) == 8:
                        date_str = parts[1]
                        episode_date = datetime.strptime(date_str, '%Y%m%d').replace(tzinfo=timezone.utc)
                        title = f"HackerCast - {episode_date.strftime('%B %d, %Y')}"
                        description = f"Daily compilation of top Hacker News stories from {episode_date.strftime('%B %d, %Y')}"
                    else:
                        title = f"HackerCast - {mod_time.strftime('%B %d, %Y')}"
                        description = f"Daily compilation of top Hacker News stories from {mod_time.strftime('%B %d, %Y')}"
                        episode_date = mod_time
                except:
                    title = f"HackerCast - {mod_time.strftime('%B %d, %Y')}"
                    description = f"Daily compilation of top Hacker News stories from {mod_time.strftime('%B %d, %Y')}"
                    episode_date = mod_time

                # Add episode to feed
                fe = fg.add_entry()
                fe.title(title)
                fe.description(description)
                fe.enclosure(f"{BASE_URL}/episodes/{mp3_file.name}", str(file_size), 'audio/mpeg')
                fe.guid(f"{BASE_URL}/episode/{episode_date.strftime('%Y-%m-%d')}")
                fe.pubDate(mod_time)

                # iTunes-specific episode tags
                if duration:
                    fe.podcast.itunes_duration(duration)
                fe.podcast.itunes_author("HackerCast")
                fe.podcast.itunes_summary(description)

                print(f"Added episode: {title} ({mp3_file.name})")

            except Exception as e:
                print(f"Error processing {mp3_file}: {e}")
                continue

        # Generate RSS
        rss_content = fg.rss_str(pretty=True)

        # Write RSS file
        with open('rss.xml', 'wb') as f:
            f.write(rss_content)

        print(f"RSS feed generated with {len(mp3_files)} episodes")
        EOF

    - name: Update index.html with latest episodes
      run: |
        python3 << 'EOF'
        import json
        import glob
        from pathlib import Path
        from datetime import datetime

        episodes = []
        for mp3_file in sorted(Path("episodes").glob("*.mp3"), key=lambda x: x.stat().st_mtime, reverse=True)[:10]:
            file_stat = mp3_file.stat()
            mod_time = datetime.fromtimestamp(file_stat.st_mtime)

            # Parse date from filename if possible
            try:
                filename = mp3_file.stem
                parts = filename.split('_')
                if len(parts) >= 2 and parts[1].isdigit() and len(parts[1]) == 8:
                    date_str = parts[1]
                    episode_date = datetime.strptime(date_str, '%Y%m%d')
                    title = f"HackerCast - {episode_date.strftime('%B %d, %Y')}"
                else:
                    title = f"HackerCast - {mod_time.strftime('%B %d, %Y')}"
                    episode_date = mod_time
            except:
                title = f"HackerCast - {mod_time.strftime('%B %d, %Y')}"
                episode_date = mod_time

            episodes.append({
                'title': title,
                'date': episode_date.strftime('%Y-%m-%d'),
                'filename': mp3_file.name,
                'url': f"./episodes/{mp3_file.name}"
            })

        # Create episodes.json for the website
        with open('episodes.json', 'w') as f:
            json.dump({'episodes': episodes}, f, indent=2)

        print(f"Generated episodes.json with {len(episodes)} episodes")
        EOF

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: '.'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2