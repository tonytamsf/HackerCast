{
  "timestamp": "20250917_130704",
  "run_date": "2025-09-17T13:07:04.705511",
  "config": {
    "environment": "development",
    "max_stories": 5,
    "tts_voice": "en-US-Neural2-D"
  },
  "stories": [
    {
      "id": 45279384,
      "title": "WASM 3.0 Completed",
      "url": "https://webassembly.org/news/2025-09-17-wasm-3.0/",
      "score": 576,
      "by": "todsacerdoti",
      "time": 1758133013,
      "descendants": 225,
      "type": "story",
      "created_at": "2025-09-17T08:16:53"
    },
    {
      "id": 45282268,
      "title": "macOS Tahoe Incompatible with Mac Studio M3 Ultra",
      "url": "https://eclecticlight.co/2025/09/17/macos-26-0-tahoe-build-25a354-is-incompatible-with-mac-studio-m3-ultra/",
      "score": 30,
      "by": "lawgimenez",
      "time": 1758148681,
      "descendants": 9,
      "type": "story",
      "created_at": "2025-09-17T12:38:01"
    }
  ],
  "scraped_content": [
    {
      "url": "https://webassembly.org/news/2025-09-17-wasm-3.0/",
      "title": "WASM 3.0 Completed",
      "content": "Three years ago, version 2.0 of the Wasm standard was (essentially) finished, which brought a number of new features, such as vector instructions, bulk memory operations, multiple return values, and simple reference types.\n\nIn the meantime, the Wasm W3C Community Group and Working Group have not been lazy. Today, we are happy to announce the release of Wasm 3.0 as the new “live” standard.\n\nThis is a substantially larger update: several big features, some of which have been in the making for six or eight years, finally made it over the finishing line.\n• 64-bit address space. Memories and tables can now be declared to use as their address type instead of just . That expands the available address space of Wasm applications from 4 gigabytes to (theoretically) 16 exabytes, to the extent that physical hardware allows. While the web will necessarily keep enforcing certain limits — on the web, a 64-bit memory is limited to 16 gigabytes — the new flexibility is especially interesting for non-web ecosystems using Wasm, as they can support much, much larger applications and data sets now.\n• Multiple memories. Contrary to popular belief, Wasm applications were always able to use multiple memory objects — and hence multiple address spaces — simultaneously. However, previously that was only possible by declaring and accessing each of them in separate modules. This gap has been closed, a single module can now declare (define or import) multiple memories and directly access them, including directly copying data between them. This finally allows tools like wasm-merge, which perform “static linking” on two or more Wasm modules by merging them into one, to work for all Wasm modules. It also paves the way for new uses of separate address spaces, e.g., for security (separating private data), for buffering, or for instrumentation.\n• Garbage collection. In addition to expanding the capabilities of raw linear memories, Wasm also adds support for a new (and separate) form of storage that is automatically managed by the Wasm runtime via a garbage collector. Staying true to the spirit of Wasm as a low-level language, Wasm GC is low-level as well: a compiler targeting Wasm can declare the memory layout of its runtime data structures in terms of struct and array types, plus unboxed tagged integers, whose allocation and lifetime is then handled by Wasm. But that’s it. Everything else, such as engineering suitable representations for source-language values, including implementation details like method tables, remains the responsibility of compilers targeting Wasm. There are no built-in object systems, nor closures or other higher-level constructs — which would inevitably be heavily biased towards specific languages. Instead, Wasm only provides the basic building blocks for representing such constructs and focuses purely on the memory management aspect.\n• Typed references. The GC extension is built upon a substantial extension to the Wasm type system, which now supports much richer forms of references. Reference types can now describe the exact shape of the referenced heap value, avoiding additional runtime checks that would otherwise be needed to ensure safety. This more expressive typing mechanism, including subtyping and type recursion, is also available for function references, making it possible to perform safe indirect function calls without any runtime type or bounds check, through the new instruction.\n• Tail calls. Tail calls are a variant of function calls that immediately exit the current function, and thereby avoid taking up additional stack space. Tail calls are an important mechanism that is used in various language implementations both in user-visible ways (e.g., in functional languages) and for internal techniques (e.g., to implement stubs). Wasm tail calls are fully general and work for callees both selected statically (by function index) and dynamically (by reference or table).\n• Exception handling. Exceptions provide a way to locally abort execution, and are a common feature in modern programming languages. Previously, there was no efficient way to compile exception handling to Wasm, and existing compilers typically resorted to convoluted ways of implementing them by escaping to the host language, e.g., JavaScript. This was neither portable nor efficient. Wasm 3.0 hence provides native exception handling within Wasm. Exceptions are defined by declaring exception tags with associated payload data. As one would expect, an exception can be thrown, and selectively be caught by a surrounding handler, based on its tag. Exception handlers are a new form of block instruction that includes a dispatch list of tag/label pairs or catch-all labels to define where to jump when an exception occurs.\n• Relaxed vector instructions. Wasm 2.0 added a large set of vector (SIMD) instructions, but due to differences in hardware, some of these instructions have to do extra work on some platforms to achieve the specified semantics. In order to squeeze out maximum performance, Wasm 3.0 introduces “relaxed” variants of these instructions that are allowed to have implementation-dependent behavior in certain edge cases. This behavior must be selected from a pre-specified set of legal choices.\n• Deterministic profile. To make up for the added semantic fuzziness of relaxed vector instructions, and in order to support settings that demand or need deterministic execution semantics (such as blockchains, or replayable systems), the Wasm standard now specifies a deterministic default behavior for every instruction with otherwise non-deterministic results — currently, this includes floating-point operators and their generated NaN values and the aforementioned relaxed vector instructions. Between platforms choosing to implement this deterministic execution profile, Wasm thereby is fully deterministic, reproducible, and portable.\n• Custom annotation syntax. Finally, the Wasm text format has been enriched with generic syntax for placing annotations in Wasm source code. Analogous to custom sections in the binary format, these annotations are not assigned any meaning by the Wasm standard itself, and can be chosen to be ignored by implementations. However, they provide a way to represent the information stored in custom sections in human-readable and writable form, and concrete annotations can be specified by downstream standards.\n\nIn addition to these core features, embeddings of Wasm into JavaScript benefit from a new extension to the JS API:\n• JS string builtins. JavaScript string values can already be passed to Wasm as externrefs. Functions from this new primitive library can be imported into a Wasm module to directly access and manipulate such external string values inside Wasm.\n\nWith these new features, Wasm has much better support for compiling high-level programming languages. Enabled by this, we have seen various new languages popping up to target Wasm, such as Java, OCaml, Scala, Kotlin, Scheme, or Dart, all of which use the new GC feature.\n\nOn top of all these goodies, Wasm 3.0 also is the first version of the standard that has been produced with the new SpecTec tool chain. We believe that this makes for an even more reliable specification.\n\nWasm 3.0 is already shipping in most major web browsers, and support in stand-alone engines like Wasmtime is on track to completion as well. The Wasm feature status page tracks support across engines.",
      "author": null,
      "published_date": null,
      "meta_description": "",
      "word_count": 1155,
      "scraping_method": "goose3"
    },
    {
      "url": "https://eclecticlight.co/2025/09/17/macos-26-0-tahoe-build-25a354-is-incompatible-with-mac-studio-m3-ultra/",
      "title": "macOS Tahoe Incompatible with Mac Studio M3 Ultra",
      "content": "If you have a Mac Studio M3 Ultra and want to upgrade it to run macOS 26.0 Tahoe, then I’m afraid you’re going to have wait for Apple to build a new release that will install on your Mac.\nI’m very grateful to Ken who has tried unsuccessfully to upgrade from 15.7 to 26.0. There are plenty of others reporting exactly the same: the upgrade goes well until towards the end, then aborts and the Mac is restarted back into 15.7. The problem seems to originate from an error in its neural engine driver.\nHaving just taken a look through a comparison between kernel extensions shipped with macOS 15.6 and 26.0, there are several Apple silicon hardware kexts that seem to have gone missing in 26.0, although whether that’s the cause only Apple’s engineers should know.\nApple is advising all those affected to put their Tahoe upgrade on pause until it releases a new build that does fully support the M3 Ultra. Until then, 15.7 is the limit for Apple’s most powerful and expensive Macs yet.\nShare this:\nClick to share on X (Opens in new window)\nX\nClick to share on Facebook (Opens in new window)\nFacebook\nClick to share on Reddit (Opens in new window)\nReddit\nClick to share on Pinterest (Opens in new window)\nPinterest\nClick to share on Threads (Opens in new window)\nThreads\nClick to share on Mastodon (Opens in new window)\nMastodon\nClick to share on Bluesky (Opens in new window)\nBluesky\nClick to email a link to a friend (Opens in new window)\nEmail\nClick to print (Opens in new window)\nPrint\nLike Loading...\nRelated",
      "author": null,
      "published_date": null,
      "meta_description": "If you have a Mac Studio M3 Ultra and want to upgrade it to run macOS 26.0 Tahoe, then I'm afraid you're going to have wait for Apple to build a new release that will install on your Mac. I'm very grateful to Ken who has tried unsuccessfully to upgrade from 15.7 to 26.0. There…",
      "word_count": 272,
      "scraping_method": "beautifulsoup"
    }
  ],
  "audio_files": [],
  "stats": {
    "stories_fetched": 2,
    "articles_scraped": 2,
    "total_words": 1427,
    "audio_files_generated": 0
  }
}