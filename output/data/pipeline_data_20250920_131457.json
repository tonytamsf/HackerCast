{
  "timestamp": "20250920_131457",
  "run_date": "2025-09-20T13:14:57.823258",
  "config": {
    "environment": "development",
    "max_stories": 5,
    "tts_voice": "en-US-Neural2-D"
  },
  "stories": [
    {
      "id": 45317527,
      "title": "$2 WeAct Display FS adds a 0.96-inch USB information display to your computer",
      "url": "https://www.cnx-software.com/2025/09/18/2-weact-display-fs-adds-a-0-96-inch-usb-information-display-to-your-computer/",
      "score": 74,
      "by": "smartmic",
      "time": 1758402287,
      "descendants": 26,
      "type": "story",
      "created_at": "2025-09-20T11:04:47"
    },
    {
      "id": 45314592,
      "title": "Ultrasonic Chef's Knife",
      "url": "https://seattleultrasonics.com/",
      "score": 298,
      "by": "hemloc_io",
      "time": 1758384776,
      "descendants": 226,
      "type": "story",
      "created_at": "2025-09-20T06:12:56"
    },
    {
      "id": 45289150,
      "title": "Teardown of Apple 40W Dynamic Power Adapter with 60W Max (A3365)",
      "url": "https://www.chargerlab.com/teardown-of-apple-40w-dynamic-power-adapter-with-60w-max-a3365/",
      "score": 52,
      "by": "givinguflac",
      "time": 1758200667,
      "descendants": 25,
      "type": "story",
      "created_at": "2025-09-18T03:04:27"
    },
    {
      "id": 45315312,
      "title": "Designing NotebookLM",
      "url": "https://jasonspielman.com/notebooklm",
      "score": 130,
      "by": "vinhnx",
      "time": 1758389158,
      "descendants": 53,
      "type": "story",
      "created_at": "2025-09-20T07:25:58"
    },
    {
      "id": 45277052,
      "title": "Knitted Anatomy",
      "url": "https://www.knitted-anatomy.at/cardiovascular-system/",
      "score": 44,
      "by": "blikstiender",
      "time": 1758123051,
      "descendants": 2,
      "type": "story",
      "created_at": "2025-09-17T05:30:51"
    },
    {
      "id": 45316744,
      "title": "A revolution in English bell ringing",
      "url": "https://harpers.org/archive/2025/10/a-change-of-tune-veronique-greenwood-bell-ringing/",
      "score": 33,
      "by": "ascertain",
      "time": 1758397896,
      "descendants": 18,
      "type": "story",
      "created_at": "2025-09-20T09:51:36"
    },
    {
      "id": 45317526,
      "title": "A brief history of threads and threading",
      "url": "https://eclecticlight.co/2025/09/20/a-brief-history-of-threads-and-threading/",
      "score": 25,
      "by": "emschwartz",
      "time": 1758402278,
      "descendants": 2,
      "type": "story",
      "created_at": "2025-09-20T11:04:38"
    },
    {
      "id": 45272022,
      "title": "Solving a wooden puzzle using Haskell",
      "url": "https://glocq.github.io/en/blog/20250428/",
      "score": 41,
      "by": "Bogdanp",
      "time": 1758086541,
      "descendants": 9,
      "type": "story",
      "created_at": "2025-09-16T19:22:21"
    },
    {
      "id": 45287838,
      "title": "After Babel Fish: The promise of cheap translations at the speed of the Web",
      "url": "https://hedgehogreview.com/issues/lessons-of-babel/articles/after-babel-fish",
      "score": 28,
      "by": "miqkt",
      "time": 1758190614,
      "descendants": 9,
      "type": "story",
      "created_at": "2025-09-18T00:16:54"
    },
    {
      "id": 45263035,
      "title": "I'm Not a Robot",
      "url": "https://neal.fun/not-a-robot/",
      "score": 248,
      "by": "meetpateltech",
      "time": 1758034044,
      "descendants": 135,
      "type": "story",
      "created_at": "2025-09-16T04:47:24"
    }
  ],
  "scraped_content": [
    {
      "url": "https://www.cnx-software.com/2025/09/18/2-weact-display-fs-adds-a-0-96-inch-usb-information-display-to-your-computer/",
      "title": "$2 WeAct Display FS adds a 0.96-inch USB information display to your computer",
      "content": "WeAct Display FS is an inexpensive 0.96-inch USB display dongle designed to add an information display or a tiny secondary display to your computer or SBC.We’ve seen this type of information display with products such as the Turing Smart Screen, a larger 3.5-inch color display, or small OLEDs integrated into cases such as the Pironman 5 Max to disable text. The WeAct Display FS V1 may be tiny, but it’s also a full-color 160×80 resolution display that can be customized with software provided by WeAct.\nText and image on display for illustration only. Not an actual photo, as I could not find any with the display connected to a host\nWeAct Display FS V1 specifications:\nDisplay – 0.96-inch RGB565 display with 160×80 resolution\nHost interface – “Reversible” USB 2.0 Type-A Full Speed (FS) port showing as a CDC device\nDimensions – 43 x 14.5 mm\nSince you wouldn’t want to get a display only for it to face the wrong direction, for instance, the desk or the wall, the company made the USB-A port reversible, and the user only needs to install one of the two provided pads on the unused side of the port to avoid short circuits.WeAct provides two programs for it. The first one is the WeAct Studio System Monitor based on a fork of Matthieu Houdebine’s Turing Smart Screen Python project. This allows users to create UIs/themes with text, images, weather, and other features… WeAct says the little device only works on Windows, but the open-source project is supposed to also work on macOS, Linux (including Raspberry Pi OS), and essentially any operating system with support for Python 3.9+.\nWeAct Studio System Monitor\nThe second program is called WeAct Studio Screen Projection, and as I understand it, it emulates an actual display, so you could move any window/program to the USB display.  I’m just not sure how a desktop OS like Windows will handle a tiny 160×80 “monitor”… I suppose it could be used to play a full-screen YouTube video or display photos for whatever reason. That one only works on Windows, and there’s no source code.\nWeAct Studio Screen Projection\nYou’ll find the WeAct Display FS V1 (0.96-inch) on AliExpress for about $2 plus shipping, but while looking for information, I also noticed a 3.5-inch variant with 480×320 resolution for about $11.\nJean-Luc Aufranc (CNXSoft)Jean-Luc started CNX Software in 2010 as a part-time endeavor, before quitting his job as a software engineering manager, and starting to write daily news, and reviews full time later in 2011.\nShare this:\nSupport CNX Software! Donate via cryptocurrencies, become a Patron on Patreon, or purchase goods on Amazon or Aliexpress. We also use affiliate links in articles to earn commissions if you make a purchase after clicking on those links.",
      "author": "Jean-Luc Aufranc (CNXSoft)",
      "published_date": null,
      "meta_description": "WeAct Display FS is an inexpensive 0.96-inch USB display dongle designed to add an information display or a tiny secondary display to your computer or",
      "word_count": 461,
      "scraping_method": "beautifulsoup"
    },
    {
      "url": "https://seattleultrasonics.com/",
      "title": "Ultrasonic Chef's Knife",
      "content": "The World's First\nUltrasonic Chef's Knife\nFor Home Cooks\nPre-Order Now\nSwitch on the ultrasonics and feel the blade glide effortlessly through food. Clean cuts, minimal force, less sticking.\nLength\n200mm\nSteel\nJapanese san mai AUS-10\nBattery\nUSB-C & wireless charging\nSkip to product information\nOpen media 1 in modal\n1\n/\nof\n4\nSeattle Ultrasonics\nC-200 Ultrasonic 8\" Chef's Knife\nRegular price\n$399.00\nRegular price\n$399.00\nSale price\n$399.00\nSale\nSold out\nPre-Order now for estimated shipping by\nJanuary, 2026 (Batch 1). Cancel anytime before your order ships. What is a Pre-Order?\nView full details\nSkip to product information\nOpen media 1 in modal\n1\n/\nof\n4\nSeattle Ultrasonics\nKnife and Charger Bundle\nRegular price\n$499.00\nRegular price\n$548.00\nSale price\n$499.00\nSale\nSold out\nPre-Order now for estimated shipping by\nJanuary 2026 (Batch 1). Cancel anytime before your order ships. What is a Pre-Order?\nView full details\nBe the first to learn more. All facts, no spam.",
      "author": null,
      "published_date": null,
      "meta_description": "Discover Seattle Ultrasonics, a startup founded by culinary technologist Scott Heimendinger. We're on a mission to make happy home cooks, and we're starting by building a better knife.",
      "word_count": 160,
      "scraping_method": "beautifulsoup"
    },
    {
      "url": "https://www.chargerlab.com/teardown-of-apple-40w-dynamic-power-adapter-with-60w-max-a3365/",
      "title": "Teardown of Apple 40W Dynamic Power Adapter with 60W Max (A3365)",
      "content": "Introduction\nOn September 10th, Apple held its 2025 Fall Event, unveiling the iPhone 17 lineup alongside a brand-new product category—iPhone Air. Among the announcements, one product that stood out was Apple’s new 40W Dynamic Power Adapter, which gained attention for its compact design and ability to dynamically deliver up to 60W of total output power.\nThe charger is now available on Apple’s official website, priced at $39 USD. According to Apple, when used with an iPhone 17 series device, the adapter can charge the phone to 50% in approximately 20 minutes—offering significantly faster charging performance compared to the previous generation. Despite the substantial power upgrade, the adapter maintains a highly compact form factor—roughly the same size as Apple’s standard 20W charger. It also features foldable prongs for improved portability and travel convenience. In the following teardown, we take a closer look at the internal design and power distribution architecture of Apple’s latest fast charger.\nProduct Appearance\nThe front of the packaging features the Apple logo, product name, and an image of the adapter.\nThe back of the packaging displays a simplified diagram of the adapter and its ports, along with CE certification and other information.\nOne side of the packaging has a specification label attached.\nThe opposite side features a label indicating the manufacturing date and \"Made in China\" origin.\nThe packaging includes the charger along with the user manual and other documentation.\nThe charger is wrapped in protective paper.\nIt features a design similar to the 35W dual USB-C charger (model A2579).\nThe small recessed areas on both sides of the body facilitate easy plugging and unplugging.\nThe output side features a single USB-C port with a white plastic insert.\nThe bottom is printed with specification details.\nModel: A3365\nInput: 100-240V\\~ 50/60Hz 1.5A (USB PD)\nOutput: (AVS) 15-20V 2A \\[3.0A DPS] or (AVS) 9-15V 2.67A \\[3.0A DPS] or 9V 3A or 5V 3A\nMaximum total output power: 60W LPS\nThe charger has passed CCC certification and Level VI energy efficiency certification.\nIt features foldable prongs.\nThe length of the charger is about 45.72 mm (1.8 inches).\nThe width is about 45.73 mm (1.8 inches).\nThe thickness is about 28.11 mm (1.11 inches).\nIts size is nearly identical to that of the Apple 20W charger.\nIt is slightly smaller than the 35W dual USB-C charger.\nThat's how big it is in the hand.\nThe weight is about 80 g (2.82 oz).\nChargerLAB POWER-Z KM003C shows that it supports PD3.0 and DCP charging protocols.\nAnd it has four fixed PDOs of 5V3A, 9V3A, 15V2.67A, and 20V2A.\nWhen used to charge the iPhone 16 Pro Max, the charging power is about 27.23W.\nWhen charging the MacBook Air M3 2024, the charging power is about 55.94W, successfully activating the 60W dynamic fast charging feature.\nTeardown\nNext, let's take it apart to see its internal components and structure.\nRemove the bottom casing, and it is revealed that the enclosure uses a combination of snap-fit clips and ultrasonic welding for sealing.\nThe input side features a contact-based power delivery design. The inner side of the casing is lined with a graphite thermal pad and has been treated for insulation.\nRemove the PCBA module.\nThe inner side of the other half of the casing is lined with the graphite thermal insulation pad and the protective rubber cushion.\nHigh-temperature resistant insulating tape is also applied along the sides.\nThe length of the PCBA module is about 42.12 mm (1.66 inches).\nThe width is about 39.66 mm (1.56 inches).\nThe thickness is about 23.27 mm (0.92 inches).\nOne side of the PCBA module and the top of the output end are covered with protective foam pads.\nA protective pad is also placed between the two high-voltage electrolytic filter capacitors on the other side.\nThe top-mounted high-voltage electrolytic filter capacitor and the transformer are secured with adhesive for added stability and insulation.\nThe solid capacitors for output filtering are also secured with adhesive, and an insulating sheet is attached to the left side of the plastic casing.\nRemove the foam pads and black adhesive. The transformer is wrapped in copper foil, and the side near the secondary winding is reinforced and insulated with a plastic casing.\nThe PCBA module's input side features metal contact plates for power delivery along with a supporting plastic frame.\nThis side contains common mode chokes, a capacitor supplying power to the master control chip, and Y capacitors.\nOn the opposite side, two high-voltage electrolytic capacitors are mounted horizontally.\nOn both sides of the output, there are Y capacitors and solid capacitors, respectively.\nRemove the capacitors, transformer, and other components. A plastic bracket is installed at the bottom to provide support and isolate the PCB.\nThe front side of the PCB features an SMD fuse and the master control chip.\nThe back side of the PCB contains the bridge rectifier, differential mode choke, synchronous rectifier, protocol chip, and output VBUS MOSFET.\nDisassemble the capacitors, transformer, and other components. Let’s take a closer look at the specifications and functions of these individual components.\nThe SMD fuse is from WalterFuse with a rated current of 3.15A.\nThe two common mode chokes are arranged in a two-stage design to more effectively filter out EMI interference.\nThe safety X2 capacitor is wrapped with copper foil for shielding.\nIt has a specification of 0.1μF.\nIt is connected via soldered copper strips.\nThe input-side bridge rectifier is from DIODES, model RTT10KL, and uses a TTL package.\nThe high-voltage filter capacitors are from NCC, each rated at 400V 47μF, connected in parallel.\nThe differential mode choke has a specification of 13μH.\nThe master control chip is from PI, marked with ZN1612F, a custom model for Apple. It integrates the primary controller, high-voltage MOSFET, synchronous rectifier controller, and feedback functions, offering high integration and reduced external components. This simplifies fast charging power circuit design. The chip uses an InSOP-T28D package.\nThe capacitor supplying power to the master control chip is from Lelon.\nIt is rated at 50V, 22μF.\nThe transformer is manufactured by Sumida.\nClose-up of three black Y capacitors.\nThe synchronous rectifier is from RECTRON, model RM85N100DF. It is an NMOS transistor with a voltage rating of 100V and an on-resistance of 4.6mΩ, packaged in a DFN 5x6-8L form factor.\nThe three solid capacitors for output filtering are from Nichicon, each rated at 25V 270μF.\nThe protocol chip is from Infineon, model CYPDC1185B2-32E, housed in a 32-pin QFN package.\nThe TI TLV9001 is a single-channel, 1MHz, rail-to-rail input and output operational amplifier with a voltage range of 1.8–5.5V, packaged in a SOT-23 (5) form factor.\nThe VBUS MOSFET is also from RECTRON, model RM80N30DN. It is an NMOS transistor rated for 30V with an on-resistance of 3.8mΩ, packaged in a DFN 3x3 form factor.\nThe thermistor monitors the internal temperature and dynamically adjusts the power level to reduce output power when the temperature rises.\nClose-up of the sampling resistor used to detect the output current.\nThe pins of the USB-C socket are extended and soldered onto the PCBA.\nWell, those are all components of the Apple 40W Dynamic Power Adapter with 60W Max.\nSummary of ChargerLAB\nHere is the component list of the Apple 40W Dynamic Power Adapter with 60W Max for your convenience.\nIt features a design similar to the 35W dual USB-C charger and comes with foldable prongs. The unique dynamic power delivery can be understood as \"peak 60W, stable 40W,\" intelligently adjusting output power based on the device’s needs. This ensures it meets the charging requirements of the iPhone while also accommodating high-power charging scenarios for the MacBook. Given the increased charging power of the iPhone 17 series, this new adapter is definitely worth considering for new device users.\nAfter taking it apart, we found that it uses the highly integrated PI power chip ZN1612F, paired with the RECTRON RM85N100DF synchronous rectifier. The output is controlled by an Infineon CYPDC1185B2-32E protocol chip, with filtering handled by capacitors from NCC and Nichicon.\nThe internal thermistor monitors the internal temperature to enable dynamic power switching. The charger’s casing remains robust as usual, with graphite thermal pads and foam cushions applied on the inside to assist with heat dissipation and protection. The PCBA module is further reinforced and insulated with foam pads and a plastic bracket, demonstrating reliable workmanship.\nRelated Articles：1.  Apple iPhone 17 Series Debuts With 40W Dynamic Power Adapter and PD 3.2 AVS Fast Charging2.  Hands-On Guide: ChargerLAB POWER-Z KM003C Load Test of Apple’s 40W Dynamic Power Adapter3. What's Difference Between Two Apple 35W Charger (Compact and Traditional)",
      "author": null,
      "published_date": null,
      "meta_description": "IntroductionOnSeptember10th,Appleheldits2025FallEvent,unveilingtheiPhone17lineupalongsideabrand-newproductcategory—iPhoneAir.Amongtheannounc",
      "word_count": 1418,
      "scraping_method": "beautifulsoup"
    },
    {
      "url": "https://eclecticlight.co/2025/09/20/a-brief-history-of-threads-and-threading/",
      "title": "A brief history of threads and threading",
      "content": "The original 128K Mac from 1984 came with a single Motorola 68000 processor running at 8 MHz that could only run one app at a time. Yet today’s Macs come with multiple CPU cores that can comfortably run several substantial apps simultaneously, while running a Time Machine backup and other tasks in the background. This brief history outlines the journey between them.\nA processor with a single core and no support for multi-tasking runs one sequence of instructions at a time. When those call for an operating system function to be performed, the running app is interrupted to hand control over to the system, and once that has completed, control is passed back to the app. That’s what the first Macs did until Andy Hertzfeld wrote Switcher, released by Apple in April 1985. This allowed the user to switch between running more than one app, but was still limited to running just one of them at a time.\nMultitasking\nOver the next couple of years, some third-party utilities were produced to go further than Switcher, but it wasn’t until 1987 that MultiFinder replaced Switcher, and was integrated into System 7 in 1991. Developed by Erich Ringewald and Phil Goldman, this brought cooperative multitasking, which was to become the mainstay of classic Mac OS.\nIn computers with a single processor core, multitasking is a way of cheating to give the impression that the processor is doing several things at once, when in fact all it’s doing is switching rapidly between two or more different programs. There are two fundamental models for doing that:\ncooperative multitasking, in which individual tasks yield to give others processing time;\npreemptive multitasking, in which a scheduler switches between tasks at regular intervals.\nWhen a processor switches from one task to the next, the current task state must be saved so it can be resumed later. Once that’s complete, the next task is loaded to complete the context switch. That incurs overhead, both in terms of processing and in memory storage, which are less when switching between lightweight tasks. Different strategies have been adopted to determine the optimum size of tasks and overhead imposed by context switching, and terminology differs between them, variously using words such as processes, threads and even fibres, which can prove thoroughly confusing.\nClassic Mac OS thus has a Process Manager that launches apps in cooperative multitasking. This works well much of the time, but lets badly behaved tasks hog the processor and block other tasks from getting their fair share. It’s greatly aided by the main event loop at the heart of Mac apps that waits for control input to direct the app to perform work for the user. But when an app charges off to spend many seconds tackling a demanding task without polling its main event loop, that app could lock the user out for what seems like an age.\nIn February 1988 Apple released the first Unix for Macintosh, A/UX, which came with preemptive multitasking. That was added to Mac OS in 1996 in System 7.5.3, in Multiprocessing Services, and further enhanced in Mac OS 8.6 three years later. Cooperative multitasking was also supported by the Thread Manager.\nThreads\nIn 2000 Apple’s hardware and software changed radically. Its first Macs with dual processors came in PowerPC 7400 (G4) chips in Power Mac G4 desktop systems, and Mac OS X brought several types of thread that could be used to manage processing on multiple processors or CPU cores, together with preemptive multitasking. Thread types include low-level Mach threads, higher-level POSIX threads or Pthreads that replaced Multiprocessing Services, Java Threads, Cocoa’s NSThreads, and cooperatively scheduled threads using the Carbon Thread Manager. The following diagram summarises Apple’s current terminology.\nIn most cases, we’re considering applications with a GUI, normally run from a bundle structure. These can in turn run their own code, such as privileged helper apps used to perform work that requires elevated privileges. In recent years, there has been a proliferation of additional executable code associated with many apps.\nWhen that app is run, there’s a single runtime instance created from its single executable code, and given its own virtual memory and access to system resources that it needs. This is a process, and listed as such in Activity Monitor, for example.\nEach process has a main thread, a single flow of code execution, and may create additional threads, perhaps to run in the background. Threads don’t get their own virtual memory, but share that allocated to the process, although they have their own stack. On Apple silicon Macs they’re easy to tell apart as they can only run on a single core, although they may be moved between cores, sometimes rapidly.\nWithin each thread are individual tasks, each a quantity of work to be performed. These can be brief sections of code and are more interdependent than threads. They’re often divided into synchronous and asynchronous tasks, depending on whether they need to be run as part of a strict sequence.\nIn 2005 the Power Mac G5 was the first Mac to use dual-core PowerPC G5 processors, then the iMac 17-inch of the following year used Apple’s first Intel Core Duo processor with two cores.\nGrand Central Dispatch\nIn 2009 Mac OS X 10.6 Snow Leopard introduced a new dispatcher, named Grand Central Dispatch (GCD) after Grand Central Terminal in New York City, and that was enhanced in macOS Sierra a decade later. More recently it has been referred to simply as Dispatch.\nAt its heart, GCD is a dispatcher managing queues of tasks, activating those that need most to be run, and leaving the less pressing to wait a bit longer. It has its own queues, as well as those assembled by apps. Some are run as simple queues with a first in first out rule, others using sophisticated heuristics to determine relative priorities. There’s a detailed account of GCD internals in Jonathan Levin’s book *OS Internals volume 1, and Apple’s current developer documentation is here.\nGCD was introduced for Macs with multiple identical cores, to support their symmetric multiprocessing (SMP), and with the release of the first Apple silicon Macs in November 2020 it has managed queues of threads to be dispatched for execution on two CPU core types, Performance and Efficiency. Core allocation is now managed according to the Quality of Service (QoS) assigned to each thread. When used on SMP processors with no contention for core availability, QoS has limited effects on thread performance, but performance on P and E cores may differ by a factor of 10.\nOver the last 41 years, macOS has gained thorough support for getting the best performance from multiple tasks, threads, and processes in chips that contain up to 32 CPU cores of two types – a far cry from that single 68000 processor.\nShare this:\nClick to share on X (Opens in new window)\nX\nClick to share on Facebook (Opens in new window)\nFacebook\nClick to share on Reddit (Opens in new window)\nReddit\nClick to share on Pinterest (Opens in new window)\nPinterest\nClick to share on Threads (Opens in new window)\nThreads\nClick to share on Mastodon (Opens in new window)\nMastodon\nClick to share on Bluesky (Opens in new window)\nBluesky\nClick to email a link to a friend (Opens in new window)\nEmail\nClick to print (Opens in new window)\nPrint\nLike Loading...\nRelated",
      "author": null,
      "published_date": null,
      "meta_description": "From Switcher and MultiFinder, with Process Manager and Thread Manager in Classic Mac OS, to Pthreads, NSThreads, and Grand Central Dispatch.",
      "word_count": 1230,
      "scraping_method": "beautifulsoup"
    },
    {
      "url": "https://glocq.github.io/en/blog/20250428/",
      "title": "Solving a wooden puzzle using Haskell",
      "content": "This post is the first of a two-part series that describes my computer-assisted solution to a physical puzzle I got. In this first part, I describe the problem and model it in Haskell. This post is a little verbose, so feel free to skip directly to part II, where we'll see how to tell our computer to actually solve the puzzle.\n\nI got gifted a puzzle recently, allegedly a \"very hard one\". After receiving it, I spent a couple minutes trying to solve it, but it quickly became clear that, unless there was a trick I'd missed, I didn't have the right combination of patience and brainpower for that. I had some family and friends try to solve it too, and although some of them displayed an impressive amount of persistence, none was persistent enough to crack the puzzle either.\n\nYou know who else is incredibly persistent? My computer. It's not nearly as smart as the humans around me and I, but it makes up for that in speed and tirelessness. So if I manage to tell it exactly what to do, it might be able to find a solution. Let's try!\n\nThe source for this post and the next is a literate Haskell file. This means you can run the code by running . You can also experiment with the values defined in it by running .\n\nThe following pieces of code are here to tell the Haskell toolchain how exactly to interpret the file, and what our dependencies and imports are. I'll also update them based on what I import in the second post.\n\nHere's what the puzzle looks like:\n\nIts principle is fairly simple: it's composed of 25 identical wooden pieces, and a 5x5x5 cubic box. To solve the puzzle, one needs to pack the pieces into a 5x5x5 cube, without holes nor chunks dangling out, so that it fits into the box.\n\nHere's what a single piece looks like: it's a 4x1x1 trunk, with a 1x1x1 cubic notch poking out from one side:\n\nThe puzzle is easy enough to understand, and the fact that it's basically all composed of cubes hints at the discrete nature of the problem, suggesting that it would lend itself well to an algorithm search. Exactly how to model the situation may not be completely obvious, though. We'll start setting the scene by modeling space itself, then we'll talk about individual pieces, first in isolation, then in the context of the whole puzzle. Along the way, we will need a bit of math; I'll do my best to explain theoretical notions as we encounter them.\n\nSince we're dealing with things that all ultimately decompose into 1x1x1 cubes, we can think of space as a grid of voxels (the 3D equivalent to a pixel) with integer coordinates. Mathematically, a position in that space is a vector with three integer coordinates .\n\nThe library provides the type constructor for vectors of three coordinates; the type of positions will thus be .\n\nSince the box has dimensions 5x5x5 voxels, we'll say it contains all voxels whose coordinates are of the form , where , and range from 1 to 5.\n\nSince all pieces are identical, we can get away with modeling just one \"generic piece\", with arbitrary position and orientation. Every other piece can then be recovered simply by moving this \"blueprint\" around. We'll pick the disposition such that the piece's trunk extends from coordinates (0, 0, 0) to (0, 0, 3), and its notch is located at (0, 1, 2). We model that generic piece by simply providing the list of coordinates of the voxels that compose it:\n\nNow let's tackle the hard part: describing the ways a piece can be arranged inside the box.\n\nMathematically, the ways that an object may be moved around in space can be described by specifying a rotation around the origin, and a translation. A 3D rotation around the origin can be encoded by a 3x3 matrix, and a translation, by a 3-component vector:\n\nNow, for a given disposition of a piece, we need a way to get the coordinates of the cubes that compose the piece. To do that, we just apply the rotation and the translation to each cube of the generic piece.\n\nOur Action Plan to Enumerate All Dispositions\n\nThe datatype is able to represent any possible disposition of a piece in the box. What we'll need to solve the puzzle is to enumerate all those dispositions, but if we try to do so, we'll run into two problems:\n• Not all values of type actually correspond to a valid disposition:\n• The field is of type , but not all matrices correspond to rotations: some of them encode transforms that mirrors their input, others, to transforms that inflate it, and others do weirder stuff yet.\n• Even in cases where the field actually encodes a rotation, the specific disposition encoded by a given might not fit in the box.\n• The datatype is infinite (ignoring technicalities): it has fields of type and , which both have coefficients, and is infinite. So even if we wanted to list all possible s, we couldn't.\n\nFortunately, it turns out that there are only finitely many possible dispositions, so there's still hope that we might be able to list them all. Directly enumerating them would be too difficult, though, so we will decompose the task:\n• First, we'll make up a list of candidate dispositions. This list will have two important properties:\n• Any valid disposition will appear in the list, even though the list might still (and will) feature invalid ones.\n• The list will be finite, so we'll be able to enumerate it.\n• Then we'll define a predicate on dispositions, that is, a function of type , which will tell us — this time with certainty — whether a given disposition is valid.\n\nTo get the full, exclusive list of valid dispositions, we'll then just need to filter out invalid dispositions from the list of candidate ones.\n\nA has two fields; let's look at each of those in detail. First, the field. s are encoded by a value of type . As we saw earlier, though, not all values of that type encode a rotation. Is there a simple way to narrow down to an easily enumerated collection? There is!\n\nTo do that, we first need to talk a bit about what the coefficients of a 3x3 matrix represent. Say you have a 3D linear transform, and you want to write down the matrix M that corresponds to it (in the standard coordinate system with axes X, Y and Z). The first thing you do is apply the transform to the X axis. You end up with a vector that is no longer necessarily aligned with the X axis; instead, it has components along the X, Y and Z axis. The coefficients on the first row of the M correspond to how much of each of the three axes appear in our transformed X axis. Then the second row correspond to the same, but starting with the Y axis, and the third row, to the Z axis.\n\nThat's for a general linear transform. But we're dealing with the much more specific case of rotations in a voxel world. If you think a bit about what happens in you rotate one of the three axes when you rotate it in that context, you'll find that it either:\n• Turns into the flipped version of another axis.\n\nIn all four cases, the corresponding matrix row will contain a 1 or a -1 coefficient for the resulting axis, and a 0 coefficient elsewhere. This means that if we enumerate all possible matrices with coefficients -1, 0 and 1, we'll get all valid rotation matrices! We do so using Haskell's handy syntactic sugar for list comprehension:\n\nAgain, keep in mind that this list contains many matrices that do not correspond to valid rotations. But all valid rotations do appear in it.\n\nNow we'll need to narrow the possible translations down into a finite list too. The following paragraph is my attempt at explaining somewhat rigorously how we do that; it's a little convoluted, but the general idea is fairly intuitive: we care only about dispositions that fit in the box, so we can rule out any disposition that translates the too far away.\n\nOk, now here's the \"rigorous\" explanation: the type is able to encode arbitrarily long translations, but we're only interested in those that keep the piece in our 5x5x5 box. Taking a look at the above, remark that it contains the cube at the origin, . Regardless of the rotation matrix we apply, it will leave that cube unchanged. This means that only the field impacts the origin cube. In other words, in any piece given by a value of type , the coordinates of the cube corresponding to the 's cube at the origin are exactly the 's field coordinates. Since we want all the cubes in our piece to fit in the box, all coefficients must be between 1 and 5. So we can rule out any disposition whose field features coefficients outside that range, and we can finitely enumerate a list of candidate translations:\n\nNow that we have an enumeration of candidates for each of 's fields, we can put them together to get a list of candidate s:\n\nNow on to filtering out the remaining invalid dispositions! First we'll weed out invalid rotations. We don't need to get into the details here, but it turns out there's an easy way to tell whether a given 3x3 matrix encodes a rotation: a 3x3 matrix M encodes a rotation exactly when it is part both of the orthogonal linear group and the special linear group. In more concrete terms, this means M fulfils the following two conditions:\n• M multiplied by its transpose is the identity matrix.\n\nIn Haskell, this translates to:\n\nWe're almost done describing all possible dispositions! We know what a valid rotation looks like, now the one problem we might still have is a piece arranged in such a way that it doesn't fit in the box. That's easy, we just need to check that each cube of the piece fits in the box:\n\nAnd a valid disposition is one whose field is actually a rotation, and which results in a piece that fits in the box:\n\nPutting it all together, we get a list of all valid dispositions by starting from the list of candidate dispositions and filtering out invalid ones:\n\nWe're pretty much done for this first blog post, but I'd like to prepare for the next one with one last step: our datatype served us well, but all we will need now to solve the puzzle is the actual coordinates of the cubes that compose the pieces. So we'll convert it all to coordinates:\n\nPhew! That was a little tedious, but now everything's in place for next part, where we'll leverage Haskell's conciseness to actually solve the puzzle in a very elegant way. See you then!",
      "author": null,
      "published_date": null,
      "meta_description": "",
      "word_count": 1847,
      "scraping_method": "goose3"
    },
    {
      "url": "https://hedgehogreview.com/issues/lessons-of-babel/articles/after-babel-fish",
      "title": "After Babel Fish: The promise of cheap translations at the speed of the Web",
      "content": "The project of machine translation was already in its fifth decade when the search engine AltaVista introduced Babel Fish, at the end of 1997. Named after the “leech-like” creature that functions as a universal translator in Douglas Adams’s The Hitchhiker’s Guide to the Galaxy (1979), it broke new ground by offering translation for free online. Previously, machine translation (MT) was something for which you had to pay and wait, since humans generally intervened to tidy up what the machine produced. AltaVista promised instant results—no human lag required—whether you wished to have an entire Webpage translated (without altering the graphics) or input an inscrutable chunk of foreign text. Here, in other words, was real-time translation of and on the Web. Digital Equipment Corporation, AltaVista’s parent company, declared that Babel Fish had “broken the Internet language barrier.”11xQuoted in Victoria Shannon, “The End User: The Power of Babel—Technology,” New York Times, May 3, 2006; https://www.nytimes.com/2006/05/03/technology/03iht-ptend04.1654790.html.\n\n“Barely breached” would be more accurate. Initially, Babel Fish could translate English text only into German, French, Spanish, Italian, and Portuguese, and vice versa (but not, say, French to Spanish), though its capabilities would expand in the ensuing years. Even within that circumscribed domain, Babel Fish often stumbled, especially with names, technical terms, and idiomatic expressions. Its hold on grammar, too, was shaky. First-time users raved, but professional translators balked. Mischief-makers played a game—called “round-tripping”—in which a translated text is rendered back into its original tongue to see what distortions arise. In this regard, Babel Fish was very obliging.\n\nShortly after the service’s debut, Umberto Eco, the novelist, semiotician, and satirist, spotted the invitation on AltaVista’s homepage and took the bait, asking Babel Fish to translate English sites into his native Italian. His “first shock,” he reported a few months later in his “La Bustina di Minerva” column in the Italian newsmagazine L’Espresso, came when he saw a page titled “Gli impianti di Shakespeare”—or “Shakespeare’s Plants.”22xUmberto Eco, “La vera storia dei pali del Papa,” L’Espresso, January 15, 1998. The rules-based system that AltaVista employed (created by the Parisian company Systran) had latched on to the wrong sense of the English “works.” The Italian translation should have been opere, the “works” of an artist; instead, it selected impianti, the “works” of an industrialist. Eco noticed other errors: An author was credited with having many ventilatori (the whirring kind of “fans”); a publisher was referred to as Harcourt “Support” (i.e., “Brace”); the Polish people (i polacchi) were reduced to poles (i pali). In a subsequent column, Eco reported on round-tripping, using the opening lines of Dante’s Inferno as a test case. Round-trip Dante, he explained, and you get proof that the machine poses no threat to “il divin poeta.” Send Dante’s lines through several more permutations, and you get modern poetry.33xUmberto Eco, “Trionfante ritorno a Babele. Como giocare seriamente con Altavista,” L’Espresso, February 19, 1998. I am grateful to the good people at L’Espresso for responding promptly to my request for a scan of this column.\n\nEco kept playing with Babel Fish, and in Mouse or Rat?, his 2003 book on “translation as negotiation,” he again brought up its shortcomings to illustrate the qualities of effective translation. To begin with, Eco pointed out, translation does not consist of mechanical synonym-swapping. If that were the case, Babel Fish’s execution would have been flawless. The words we rely on most have multiple senses, and to determine the specific one invoked on any given occasion, the translator must decipher contextual clues. This Babel Fish could not do—even when given the larger window of multiple sentences. Inputting the opening verses of the Authorized Version’s Genesis, Eco was amused to find the English “spirit of God” transformed into the Spanish “el alcohol de dios.”44xUmberto Eco, Mouse or Rat? Translation as Negotiation (London, England: Phoenix Paperback 2004), 14. Moving between languages, furthermore, the translator needs to honor the grammatical and syntactic mores of both. No competent English user would say “divide waters of waters” (as Babel Fish rendered “aguas de aguas”) or begin a sentence, “In the God who began created heaven…” (as Babel Fish did in multiple languages). Even contextual and grammatical wherewithal could get the translator only so far, however. To decide whether “works” ought to be opere or impianti, the translator needed to know a simple fact that Babel Fish lacked—“that Shakespeare was a poet and a playwright and not an industrial tycoon.”55xIbid., 13.\n\nThe machine’s miscues clarified that translation depends on more than a large vocabulary and grammatical proficiency in two tongues. The translator must also possess extensive “world knowledge.”66xIbid., 18. Only one so equipped can undertake the multiple negotiations—with languages, with the author, with the imagined reader, with a very real publisher—that translation entails. Babel Fish might have its uses (and amusements), Eco granted, but it could never handle all that. Real-time machine translation was not ready for the world.\n\nIs it now? Within a decade of its release, Babel Fish began to sink to the bottom of the Web, along with AltaVista, DEC, and its later owner, Yahoo, all doomed by the ascendance of Google. Google Translate (launched in 2006) demonstrated that a corpus-based statistical approach was superior to Babel Fish’s often cross-wired rules, though it too was prone to embarrassing gaffes, leading Google to implement a neural net upgrade in 2016. Generative AI has now shaken up the field again, initial results being so promising that some within the industry are speaking of machine translation as “almost a solved problem” (to echo a recent Economist headline).77xMachine Translation Is Almost a Solved Problem,” The Economist, December 11, 2024; https://www.economist.com/science-and-technology/2024/12/11/machine-translation-is-almost-a-solved-problem. Once again, we hear rumors of a forthcoming Babel fish. “Apple Is Turning Its AirPods Into the Babel Fish From Hitchhiker’s Guide to the Galaxy,” the news site Quartz reports.88xEce Yildirim, “Apple Is Turning Its AirPods Into the Babel Fish From Hitchhiker’s Guide to the Galaxy,” Quartz, March 14, 2025; https://qz.com/apple-airpods-translate-ios-19-1851770018. “Meta’s New Translation AI Is Nearly a Babel Fish,” the engineering site IEEE Spectrum declares.99xCharles Q. Choi, “Meta’s New Translation AI Is Nearly a Babel Fish,” IEEE Spectrum, January 15, 2025; https://spectrum.ieee.org/machine-translation Others promise that Star Trek’s universal translators will soon materialize in our palms.\n\nHaving now collectively ridden through several AI hype cycles, we know to be wary of such grandiose claims. For one, the world hosts more than seven thousand languages, and even the best of the current tools can handle only a tiny fraction of that total. The new Meta product SEAMLESSM4T (those four Ms standing for “Massively Multilingual & Multimodal Machine Translation”), for example, can take in speech and text from around one hundred languages, but its outputs fall to the thirties depending on what you ask it to do.1010xSeamless Communication et al., “SEAMLESSM4T: Massively Multilingual & Multimodal Machine Translation,” October 25, 2023; https://arxiv.org/pdf/2308.11596. That is still a remarkable achievement, especially given that the system works across modalities—from, say, Dutch text to Romanian speech. But you are out of luck if you wish to generate Serbian speech from Tamil speech or Xhosa text from any source. In thousands of cases, data is too scarce to make contemporary MT techniques feasible.\n\nThe “nearly solved problem” is not machine translation simpliciter, then, but the automatic, real-time translation of “high-resource” languages, meaning those for which training data has been generously provided by the Web, such as English and Spanish. To prove this point, researchers wave their systems’ scores on tests with acronyms like BLEU, MQM, and XCOMET in the air and proclaim that the machines are catching up to human translators. But the real test is the average user’s experience, yours and mine. While writing this article, I have run Italian, French, Spanish, Latin, and German passages through multiple machine translators, and while all made mistakes (more on that in a moment), their performance was consistently serviceable—at times, delightful—and undeniably convenient. The Belgian traveler who can’t read an apparently urgent Hindi sign, the Korean scientist writing an article in her third language, the Peruvian parent whose baby monitor comes with Chinese directions, the Saudi business owner arguing with a Norwegian contractor—all these parties, and many others, will find the new and improved MT a godsend.\n\nNor should we be surprised that machine translators can, in many everyday instances, rival their human counterparts. In 2011, as alarm bells sounded about the old Google Translate, the translator and academic David Bellos wisely noted, “Whatever a language may be in principle, in practice it is used most commonly to say the same things over and over again.”1111xDavid Bellos, Is That a Fish in Your Ear? Translation and the Meaning of Everything (New York, NY: Faber and Faber, 2011), 257. Professional translators are not constantly reinventing the wheel, Bellos stressed; rather, through daily practice and exposure to the conventions of their field, they develop “automatisms” that help them to make quick work of recurring issues. In this respect, human translators are not so different from Google Translate, Bellos argued, “scanning their own memories in double-quick time for the most probable solution to the issue at hand.”1212xIbid. Even human translation has its mechanical side.\n\nBellos was thus more than happy to cede routine tasks to computers. Doing so, he believed, would free up human translators to concentrate on the many tricky problems that seemed to defy statistical solutions. He imagined that demand for human translation services would grow as businesses and consumers around the globe came to “expect more and more communication between languages” and found MT inadequate on its own.1313x“What’s Lost (And Found) In Machine Translation,” interview with David Bellos; https://bigthink.com/videos/whats-lost-and-found-in-machine-translation/. Yet he also admitted to having worries that Google Translate and tools of its ilk might instigate a cultural shift in which translation would come to be seen as “a task fit only for machines.”1414xInterview with Translator David Bellos,” Gengo, February 2, 2012; https://gengo.com/business-insights/david-bellos/.\n\nBellos failed to see the enduring attraction of the Babel Fish formula: cheap translation at the speed of the Web. That project is now charging ahead with machine learning, and industry leaders are unsurprisingly eager to reduce their dependence on slow, expensive, break-taking humans, if not remove them from the equation entirely. Vasco Pedro, the outspoken CEO of Unbabel, has forecast exactly that: “It’s hard for me to see right now,” he told CNBC last year, “how three years from now, you will need humans to be translating anything.”1515xArjun Kharpal, “Startup CEO Says Humans Won’t Be Needed for Translation in 3 Years as It Launches AI App,” CNBC, November 13, 2024; https://www.cnbc.com/2024/11/13/unbabel-launches-ai-translation-app-looks-for-fresh-funding.html. Unbabel’s services are representative of the emerging paradigm for fully automated translation: Machines generate text, edit that text, and score the text for accuracy, length, coherence, and even more intangible qualities like fluidity and style. Clients are offered, in turn, not only rapid translation across a broad menu of languages but also “real-time quality scores” of the machine’s outputs. Human translators are pushed to the fringes, serving as a fail-safe mechanism for exceptionally difficult use cases and scorers in the development of gold-standard benchmarks. Several of the new MT companies present human editing as an optional upgrade.\n\nIn 2011, Bellos cautioned readers to use Google Translate only “to translate into a language in which you are sure you can recognize nonsense.”1616xBellos, Is That a Fish in Your Ear?, 256. Unbabel’s products are designed to surmount those inhibitions: Thanks to the company’s trusty internal metrics, you can allow the machines to churn away in ninety languages—from Afrikaans to Vietnamese—with the reassurance that line graphs and pie charts provide.\n\nUnsurprisingly, I have reservations about the drive to push humans out of the business of translation. In the first place, you don’t need to wade very deeply into the technical literature to grasp that, while the new MT has surpassed the old benchmarks by Olympic leaps and bounds, the machines are far from the “super polyglots” that Mr. Pedro has been peddling for smooth sailing in the metaverse. While adept at translating words, sentences, and paragraphs, their performance degrades as assignments lengthen; automatic book-length translation is still out of reach. The machines can forget previous renderings of a repeated term or phrase. They can slip into, and sometimes get mired in, “translationese”—clauses in which in the wrong places sit. They can be “verbose” (a semi-technical term), yielding more words than the prompter needs (say, for a headline) or fabricating additional verbiage beyond what the source text states. They sometimes refuse reasonable assignments. They make mistakes about (or fail to ask for context regarding) sensitive grammatical matters such as gender and person. They still garble idiomatic expressions, metaphors, and wordplay. And, of course, they hallucinate—which is to say, they make stuff up.\n\nEco provides a useful gauge of MT’s current capabilities and hazards. As expected, all the systems that I tested romped through the puzzles Eco posed to Babel Fish a quarter century ago. In fact, when round-tripping (immaculately) the opening words of Inferno, several of the machines earned bonus points for noting the lines are Dante’s. Yet when I submitted passages from the essays in which Eco related his Babel Fish experiments, results were mixed. The opening sentences of his piece “How to Play Seriously with Altavista” are illustrative. First, Eco’s Italian:\n\nClaude 3.7 Sonnet came in dead last, though at a quick first glance you might not see why:\n\nThere are two inexcusable blunders here. The first is the choice of “indisposing” for the Italian “indisponente.” In addition to being outdated English, “indisposing” is untrue to the author’s meaning. It suggests a lack of fit, or even illness, whereas Eco’s word choice was meant to anticipate the reader’s chagrin at finding another Eco column on Babel Fish. “Annoying” would work, as would “irritating,” “off-putting,” “exasperating,” and “irksome”—those words being the other machines’ proposals. The second issue is the verb in the last sentence. Claude got the gesture backwards: “devo” means not “I gave” but “I owe.” Now to be fair to Claude’s developers at Anthropic, I should acknowledge that when I tried the same prompt a few days later, the bot translated the verb correctly. Yet the fact that the machine translator can be right one day and wrong another is, as I’m sure you’ll agree, irritating.\n\nThe other responses were quite similar, structurally speaking, and while one might nitpick here or there, they all gave clear-enough windows into Eco’s thinking. One of Gemini 2.0 Flash’s outputs stood out for another reason. First, the translation:\n\nAfter this, and without my prompting, Gemini proffered notes on key words in the passage, beginning with “indisponente.” “While ‘off-putting’ works,” the bot explained, “it can also mean ‘unpleasant’ or ‘reluctant.’ The idea is that it’s a bit annoying or tedious to keep going back to online translations.” While the second sentence is true, the first is not. “Unpleasant” is in the right neighborhood, although Italian lexicographers stress that indisponente signals a strong reaction that, to my ear, “unpleasant” does not convey. “Reluctant,” however, is simply incorrect. When I followed up to ask Gemini if “reluctant” would be an appropriate translation of indisponente, it replied, “No, ‘reluctant’ is not a direct or common translation of the Italian word,” and added that while a person who is “indisponente (annoying) might cause someone else to be ‘reluctant’ to interact with them, the words themselves describe different qualities or states.” Annoying.\n\nThe most troublesome phrase for the machines, though, was among the first that I input—the title of Eco’s column, “La Bustina di Minerva.” The most popular answer was “Minerva’s sachet.” Gemini suggested “Minerva’s little envelope” or “Minerva’s small pouch.” ChatGPT replied, “The Little Minerva’s Packet” or, more naturally, ‘Minerva’s Little Notebook,” and, on a subsequent trial, related, “It refers to the small pouch (or satchel) associated with Minerva, the Roman goddess of wisdom,” and then pointed out, “The phrase was used by the Italian writer and philosopher Umberto Eco as the title of a long-running column in L’Espresso magazine.” Despite all that bonus information, ChatGPT was, like the rest, mistaken.\n\n“Bustina,” mind you, is applied to small envelopes, pouches, and packets. But our author was referring to a specific kind, the bustina di fiammiferi—the matchbook (or matchbox). In his inaugural column, in March 1985, Eco explained that he had chosen the name “not as a reference to the goddess of wisdom, but to the matchbooks that go by that brand name.”1818xEco, “Che Bell’Errore,” L’Espresso, March 31, 1985; https://lespresso.it/c/idee/2016/2/26/umberto-eco-che-bellerrore-ecco-la-sua-prima-storica-bustina-di-minerva/19016. Translation my own. He was recalling the old practice of using the blank inner flap of a matchbook to scribble an idea before it faded, the phone number of a potential love interest, or the title of a book to purchase or bypass. That’s what his column would offer—not the wisdom of the ages but thinking at its earliest stages.\n\nTo get the title—“Minerva’s Matchbook”—right, the translator needs to possess that “world knowledge” that Eco, having sampled Babel Fish, newly appreciated in translators of his own species. A translator who dwelled in Eco’s Italy—where people regularly needed a light—might catch the reference immediately. Yet even one remote from Eco’s world can easily glean the necessary information by starting in the obvious place: the debut column. And even that effort isn’t necessary. Googling will solve the mystery in a few clicks. The last two steps—searching the author’s writings or the Web—will happen, though, only if you first admit that Eco’s meaning eludes you, that if translated in the most straightforward fashion the title is odd. Humility here is an asset. ChatGPT went the other way: To support its version of Eco’s title, it invented a backstory, adding an accessory to Minerva’s traditional garb. Irksome.\n\nIt will get better, you say, whether in hope, fear, or fatigue. It may. By the time you read this, the machines may have sorted out their confusions about indisponente and devo and gotten a hint about the brand name behind Eco’s column title. On the other hand, due to the growing complexity of these systems, ironing out the current kinks may have ripple effects that give rise to other headaches, mild or severe. Some degree of duplicity and hallucination may just be part of the deal. Umberto Eco may always be a nuisance to translation machines.\n\nEither way, we ought to be wary of the efforts of the proponents of MT automation to define translation as a purely technical activity, one whose success or failure can be unfailingly measured in real time, at all times, by metrics determined and administered by company machines. Translation is a technical activity, both in the more rarefied sense of dealing with specialized domains (e.g., scientific papers) and the basic one of depending on tekhnē, craft. But that craft is, and has always been, employed to mediate between those who otherwise would be reduced to pantomime or frustrated silence. Translation is thus, as translators themselves have been admitting with growing confidence in recent decades, a profoundly ethical pursuit.\n\nThat was what Eco was trying to get at with his notion of translation as “negotiation.” Translation does not happen in a vacuum; it is a social act that takes place at a given time and in a given milieu. It occurs on behalf of multiple parties—the author, who otherwise wouldn’t be read in the target language; the reader, who otherwise wouldn’t have access to the author’s questioning, imagining, reasoning, fact-finding, forecasting, declaiming, etc.; the publisher, who commissions the work and hopes to turn a buck; and perhaps to “culture” or “posterity” in some vague or certain sense. Accordingly, Eco portrayed the translator as the party who seeks a compromise between the several claimants in the exchange.\n\n“World knowledge” helps. For only by having a thick understanding of the author, the author’s culture, the source language, the target language, the conventions of the genre in question, and the intended audience can the translator make wise linguistic choices. The process hinges, though, on faithfulness—not as a patented method but as a manner of approach. Faithfulness, on Eco’s telling, consists of faith in the possibility of translation in the first place, a wager on meaning despite obvious impediments. It extends to the translator’s interpretive excavations to grasp the text’s “deep sense” (which becomes the basis for subsequent decisions to be made about style, tone, rhythm, sentence length, word order, punctuation, and so on). It finds expression in “the goodwill that prods us to negotiate the best solution for every line.” “Among the synonyms of faithfulness,” Eco argued in 2003, “the word exactitude does not exist. Instead, there is loyalty, devotion, allegiance, piety.”1919xEco, Mouse or Rat?, 192.\n\nEco’s bar is, unquestionably, high. Others would place it lower, or stress other dimensions of translation. Even so, his account is valuable now because it brings to light the fact that the translator, being answerable to multiple parties, faces a series of ethical challenges as she works word by word, sentence by sentence, through her assignment.\n\nMeanwhile, one is hard-pressed to find any mention of faithfulness, devotion, allegiance, or piety in the reports issuing daily on MT breakthroughs, though synonyms of exactitude abound. In industry and academic papers on MT, the “ethics” section (if there is one) often consists of nothing more than the details of how the team sought to tamp down bias, especially gender bias, and root out offensive language. Developers, for example, have been alarmed to note added “toxicity” in their outputs—meaning the machines sometimes introduce toxic language even though the original contained none. The favored solution is, of course, to build better diagnostics and add more safety protocols. Eco endeavored to renew faithfulness; Big Tech offers us “automatic toxicity detection.”\n\nBut the campaign to automate translation has its weightiest consequence not in the machine’s sphere but the user’s. As the translator Mark Polizzotti has observed, the “stale” Italian pun traduttore, traditore (“translator, traitor”) conveys a cultural truth: In most situations, we’d prefer not to trust the middleman.2020xMark Polizzotti, Sympathy for the Traitor: A Translation Manifesto (Cambridge, MA: MIT Press, 2018), 12. Translation is, for the audience, a vulnerable state: We must put our trust in a stranger who stands between us and the source that we cannot hear or read for ourselves. We must (to echo the second epigraph above) “take another person’s word for it.” Receiving a translation is an act of faith. Translation lays bare the grating fact of our finitude.\n\nHow much more appealing is the empowerment promised by the new MT systems. Now you are the controls. You can have your translation right now, tailored to your specifications. Which style would you prefer, DeepL Translate asks users—Simple? Business? Academic? Casual? What about tone? Friendly, enthusiastic, confident, or diplomatic? Or perhaps you’d like the text rendered as rhyming couplets? ChatGPT stands ready. And we have already seen a preview, thanks to Gemini, of the machines’ ability to supplement their renditions with commentary. With these tools at our fingertips and plugged into our ears, we may at last enjoy the linguistic freedom of our favorite sci-fi characters. We may go anywhere and never be lost for words.\n\nOf course, as things currently stand, the new Babel Fish may prove riskier companions than today’s boisterous headlines admit. At our cultural moment in which a single ill-timed word or misplaced character can ignite a career-ending social-media storm, I suspect that some hard lessons await the most vociferous early adopters, especially those who pay no heed to Bellos’s warning against straying into languages in which you can’t spot rubbish (or excrement). We may find, moreover, that the ability to pontificate at any time, in scores of languages, creates new problems as words get out that we might, on second thought, rather not have shared or heard. More communication is not necessarily better communication. (Such was Douglas Adams’s lesson: “The poor Babel fish, by effectively removing all barriers to communication between different races and cultures, has caused more and bloodier wars than anything else in the history of creation.”2121xDouglas Adams, The Hitchhiker’s Guide to the Galaxy (London, England: Pan Books, 1979), 61.)\n\nThe old, slower-paced translation, meanwhile, offers those willing to attend a salutary disquiet. Where Babel Fish would render humanity’s diverse articulations on the user’s handpicked terms, the old translation reminds us that the whole world cannot be accounted for using the satchel of words that we ordinarily bear about with us. The old translation exposes the limitations of our language, even while gesturing toward the possibilities of others through shrewd incorporations. Translation, at its most human, tugs familiar words into foreign realms of meaning, renewing and extending them, and inviting us to follow there that we might sample the local flavors for ourselves. The developers of machine translation have achieved remarkable technical feats, and surely more are to come; their labors will release a torrent of words, and many of them will be good ones. But we ought to be apprehensive about what the Babel Fish whispers in our ears. Automatic machine translation is being marketed as a means to expand our little worlds. It may just as easily render the world back to us on ever more narrow terms.",
      "author": null,
      "published_date": null,
      "meta_description": "",
      "word_count": 4168,
      "scraping_method": "goose3"
    }
  ],
  "audio_files": [
    "output/audio/hackercast_20250920_131442.mp3"
  ],
  "stats": {
    "stories_fetched": 10,
    "articles_scraped": 6,
    "total_words": 9284,
    "audio_files_generated": 1
  }
}